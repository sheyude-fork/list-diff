{
  "version": 3,
  "sources": [
    "node_modules/browser-pack-flat/_prelude",
    "src/types.ts",
    "src/utils.ts",
    "src/listDiff.ts",
    "src/applyPatches.ts",
    "src/SimpleTinker.ts",
    "node_modules/browser-pack-flat/_postlude",
    "src/index.ts"
  ],
  "names": [
    "f",
    "exports",
    "module",
    "define",
    "amd",
    "window",
    "global",
    "self",
    "this",
    "ListDiff",
    "PatchType",
    "_$types_5",
    "ADD",
    "DELETE",
    "REPOSITION",
    "_$utils_6",
    "difference",
    "a",
    "b",
    "reduce",
    "r",
    "value",
    "index",
    "concat",
    "indexOf",
    "_$listDiff_4",
    "listDiff",
    "patches",
    "deleted",
    "added",
    "repoHistory",
    "getMoves",
    "i",
    "j",
    "deletedCount",
    "filter",
    "d",
    "length",
    "addedCount",
    "removeBeforeCount",
    "from",
    "to",
    "insertBeforeCount",
    "hasRepositioned",
    "id",
    "_",
    "_added",
    "map",
    "tail",
    "slice",
    "toAdd",
    "push",
    "after",
    "type",
    "_deleted",
    "aHead",
    "bHead",
    "aHeadPos",
    "bHeadPos",
    "repoPatches",
    "moves",
    "_$applyPatches_2",
    "applyPatches",
    "input",
    "tinker",
    "output",
    "patch",
    "applyAdditon",
    "applyDeletion",
    "applyRepostion",
    "_$SimpleTinker_1",
    "SimpleTinker",
    "[object Object]",
    "afterIndex",
    "deleteIndex",
    "fromIndex",
    "toIndex",
    "splice",
    "_$index_3"
  ],
  "mappings": "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",
  "sourcesContent": [
    "(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.ListDiff = f()}})(function(){var define,module,exports;\n",
    "export enum PatchType {\n    ADD = 'ADD',\n    DELETE = 'DELETE',\n    REPOSITION = 'REPOSITION'\n}\n\nexport type Patch = {\n    type: PatchType,\n    id: string,\n    moves?: number,\n    after?: string|string[]\n}\n\nexport type Reposition = {\n    id: string,\n    from: number,\n    to: number\n}\n\nexport interface Tinker {\n    applyAdditon (input: string[], addtionPatch: Patch): string[];\n    applyDeletion (input: string[], deletionPatch: Patch): string[];\n    applyRepostion (input: string[], repositionpPatch: Patch): string[];\n}\n",
    "export type E<T> = {\n    value: T,\n    index: number\n}\n\nexport const difference = <T> (a: T[], b: T[]): E<T>[] =>\n    a.reduce(\n        (r: E<T>[], value: T, index: number) =>\n            r.concat(\n                b.indexOf(value) === -1\n                    ? [{\n                        value,\n                        index\n                    }] : []\n            ),\n        []\n    )\n",
    "import { Patch, PatchType, Reposition } from './types'\nimport { E, difference } from './utils'\n\nexport const listDiff = (a: string[], b: string[]): Patch[] => {\n    const patches: Patch[] = []\n    const deleted: E<string>[] = difference(a, b)\n    const added: E<string>[] = difference(b, a)\n    const repoHistory: Reposition[] = []\n\n    const getMoves = (i: number, j: number): number => {\n        const deletedCount = deleted.filter((d: E<string>) => d.index <= j).length\n        const addedCount = added.filter((d: E<string>) => d.index <= j).length\n        const removeBeforeCount = repoHistory.filter((r: Reposition) => r.from < i && r.to > j).length\n        const insertBeforeCount = repoHistory.filter((r: Reposition) => r.from > j && r.to < i).length\n\n        return j - i + deletedCount - addedCount + removeBeforeCount - insertBeforeCount\n    }\n\n    const hasRepositioned = (id: string) => {\n        return repoHistory.filter((r: Reposition) => r.id === id).length > 0\n    }\n\n    /**\n     * 基于最小编辑距离算法原理的 list-diff\n     * @description\n     * 令 a' = a.slice(0)，b' = b.slice(0)\n     * 求 a' -> b' 的编辑距离\n     * @param a\n     * @param i start index of a\n     * @param b\n     * @param j start index of b\n     */\n    function _ (a: string[], i: number, b: string[], j: number) {\n        if (i === a.length) {\n            const _added: string[] = added.map((d: E<string>) => d.value)\n\n            const tail = b.slice(j)\n            const toAdd = tail.filter(id => _added.indexOf(id) > -1)\n\n            patches.push(\n                ...toAdd.reduce((patches: Patch[], id: string) => {\n                    const index = tail.indexOf(id)\n\n                    const after = index === 0\n                        ? (j > 0 ? b[j - 1] : '')\n                        : tail[index - 1]\n\n                    return patches.concat([{\n                        type: PatchType.ADD,\n                        id,\n                        after\n                    }])\n                }, [])\n            )\n\n            return\n        }\n\n        if (j === b.length) {\n            const _deleted = deleted.map(d => d.value)\n\n            patches.push(\n                ...a\n                    .slice(i)\n                    .filter(id => _deleted.indexOf(id) > -1)\n                    .map(id => ({\n                        type: PatchType.DELETE,\n                        id\n                    }))\n            )\n\n            return\n        }\n\n        // 检查 a' 和 b' 的首个元素是否相同\n        const aHead = a[i]\n        const bHead = b[j]\n\n        if (aHead !== bHead) {\n            // 检查是否删除了 aHead\n            const aHeadPos = b.indexOf(aHead)\n            if (aHeadPos === -1) {\n                // 删除了 aHead\n                patches.push({\n                    type: PatchType.DELETE,\n                    id: aHead\n                })\n            }\n\n            // 检查是否增加了 bHead\n            const bHeadPos = a.indexOf(bHead)\n            if (bHeadPos === -1) {\n                // 增加了 bHead\n                patches.push({\n                    type: PatchType.ADD,\n                    id: bHead,\n                    after: j > 0 ? b[j - 1] : ''\n                })\n            }\n\n            const repoPatches: Patch[] = []\n\n            if (aHeadPos > -1) {\n                if (!hasRepositioned(aHead)) {\n                    const r: Reposition = {\n                        id: aHead,\n                        from: i,\n                        to: aHeadPos\n                    }\n\n                    // 如果 aHead 没有被删除，也没有移动过，则计算其移动的距离\n                    const moves = getMoves(i, aHeadPos)\n\n                    if (moves !== 0) {\n                        repoPatches.push({\n                            type: PatchType.REPOSITION,\n                            id: aHead,\n                            moves\n                        })\n\n                        repoHistory.push(r)\n                    }\n                }\n            }\n\n            if (bHeadPos > -1) {\n                if (!hasRepositioned(bHead)) {\n                    const r: Reposition = {\n                        id: bHead,\n                        from: bHeadPos,\n                        to: j\n                    }\n\n                    // 如果 bHead 没有被删除，也没有移动过，则计算其移动的距离\n                    const moves = getMoves(bHeadPos, j)\n\n                    if (moves !== 0) {\n                        repoPatches.push({\n                            type: PatchType.REPOSITION,\n                            id: bHead,\n                            moves\n                        })\n\n                        repoHistory.push(r)\n                    }\n                }\n            }\n\n            patches.push(...repoPatches)\n        }\n\n        _(a, i + 1, b, j + 1)\n    }\n\n    _(a, 0, b, 0)\n\n    return patches\n}\n",
    "import { Patch, PatchType, Tinker } from './types'\n\nexport const applyPatches = (input: string[], patches: Patch[], tinker: Tinker) => {\n    let output: string[] = input\n\n    for (let i = 0; i < patches.length; i++) {\n        const patch = patches[i]\n\n        switch (patch.type) {\n        case PatchType.ADD:\n            output = tinker.applyAdditon(output, patch)\n            break\n        case PatchType.DELETE:\n            output = tinker.applyDeletion(output, patch)\n            break\n        case PatchType.REPOSITION:\n            output = tinker.applyRepostion(output, patch)\n        }\n    }\n\n    return output\n}\n",
    "import { Tinker, Patch, PatchType } from './types'\n\nexport class SimpleTinker implements Tinker {\n    applyAdditon (input: string[], patch: Patch): string[] {\n        if (patch.type !== PatchType.ADD) return input\n\n        const { id, after } = patch\n        if (typeof after !== 'string') {\n            let afterIndex = -1\n            for (let i = after.length - 1; i > 0; i--) {\n                afterIndex = input.indexOf(after[i])\n                if (afterIndex > -1) break\n            }\n\n            return [...input.slice(0, afterIndex + 1), id, ...input.slice(afterIndex + 1)]\n        }\n\n        if (after === '') {\n            return [id, ...input]\n        }\n\n        const afterIndex = input.indexOf(after)\n        return [...input.slice(0, afterIndex + 1), id, ...input.slice(afterIndex + 1)]\n    }\n\n    applyDeletion (input: string[], patch: Patch): string[] {\n        if (patch.type !== PatchType.DELETE) return input\n\n        const { id } = patch\n        const deleteIndex = input.indexOf(id)\n        return [...input.slice(0, deleteIndex), ...input.slice(deleteIndex + 1)]\n    }\n\n    applyRepostion (input: string[], patch: Patch): string[] {\n        if (patch.type !== PatchType.REPOSITION) return input\n\n        const { id, moves } = patch\n        const fromIndex = input.indexOf(id)\n        const toIndex = fromIndex + moves\n        input.splice(fromIndex, 1)\n        return [...input.slice(0, toIndex), id, ...input.slice(toIndex)]\n    }\n}\n",
    "\nreturn _$index_3;\n\n});\n",
    "export { Patch, PatchType, Tinker } from './types'\nexport { listDiff } from './listDiff'\nexport { applyPatches } from './applyPatches'\nexport { SimpleTinker } from './SimpleTinker'\n"
  ],
  "sourceRoot": ""
}