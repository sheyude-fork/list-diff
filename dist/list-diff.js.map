{
  "version": 3,
  "sources": [
    "node_modules/browser-pack-flat/_prelude",
    "src/types.ts",
    "src/utils.ts",
    "src/listDiff.ts",
    "src/applyPatches.ts",
    "src/SimpleTinker.ts",
    "node_modules/browser-pack-flat/_postlude",
    "src/index.ts"
  ],
  "names": [
    "f",
    "exports",
    "module",
    "define",
    "amd",
    "window",
    "global",
    "self",
    "this",
    "ListDiff",
    "PatchType",
    "_$types_5",
    "ADD",
    "DELETE",
    "REPOSITION",
    "_$utils_6",
    "difference",
    "a",
    "b",
    "reduce",
    "r",
    "value",
    "index",
    "concat",
    "indexOf",
    "_$listDiff_4",
    "listDiff",
    "patches",
    "deleted",
    "added",
    "repoHistory",
    "getMoves",
    "i",
    "j",
    "deletedCount",
    "filter",
    "d",
    "length",
    "addedCount",
    "removeBeforeCount",
    "from",
    "to",
    "insertBeforeCount",
    "hasRepositioned",
    "id",
    "_",
    "aHead",
    "bHead",
    "aHeadPos",
    "push",
    "type",
    "bHeadPos",
    "after",
    "moves",
    "repoPatches",
    "apply",
    "_deleted_1",
    "map",
    "slice",
    "_added_1",
    "tail_1",
    "toAdd",
    "_$applyPatches_2",
    "applyPatches",
    "input",
    "tinker",
    "output",
    "patch",
    "applyAdditon",
    "applyDeletion",
    "applyRepostion",
    "SimpleTinker",
    "prototype",
    "afterIndex_1",
    "__spreadArrays",
    "afterIndex",
    "deleteIndex",
    "fromIndex",
    "toIndex",
    "splice",
    "_$SimpleTinker_1",
    "_$index_3"
  ],
  "mappings": "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",
  "sourcesContent": [
    "(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.ListDiff = f()}})(function(){var define,module,exports;\n",
    "export enum PatchType {\n    ADD = 'ADD',\n    DELETE = 'DELETE',\n    REPOSITION = 'REPOSITION'\n}\n\nexport type Patch = {\n    type: PatchType,\n    id: string,\n    moves?: number,\n    after?: string|string[]\n}\n\nexport type Reposition = {\n    id: string,\n    from: number,\n    to: number\n}\n\nexport interface Tinker {\n    applyAdditon (input: string[], addtionPatch: Patch): string[];\n    applyDeletion (input: string[], deletionPatch: Patch): string[];\n    applyRepostion (input: string[], repositionpPatch: Patch): string[];\n}\n",
    "export type E<T> = {\n    value: T,\n    index: number\n}\n\nexport const difference = <T> (a: T[], b: T[]): E<T>[] =>\n    a.reduce(\n        (r: E<T>[], value: T, index: number) =>\n            r.concat(\n                b.indexOf(value) === -1\n                    ? [{\n                        value,\n                        index\n                    }] : []\n            ),\n        []\n    )\n",
    "import { Patch, PatchType, Reposition } from './types'\nimport { E, difference } from './utils'\n\nexport const listDiff = (a: string[], b: string[]): Patch[] => {\n    const patches: Patch[] = []\n    const deleted: E<string>[] = difference(a, b)\n    const added: E<string>[] = difference(b, a)\n    const repoHistory: Reposition[] = []\n\n    const getMoves = (i: number, j: number): number => {\n        const deletedCount = deleted.filter((d: E<string>) => d.index <= j).length\n        const addedCount = added.filter((d: E<string>) => d.index <= j).length\n        const removeBeforeCount = repoHistory.filter((r: Reposition) => r.from < i && r.to > j).length\n        const insertBeforeCount = repoHistory.filter((r: Reposition) => r.from > j && r.to < i).length\n\n        return j - i + deletedCount - addedCount + removeBeforeCount - insertBeforeCount\n    }\n\n    const hasRepositioned = (id: string) => {\n        return repoHistory.filter((r: Reposition) => r.id === id).length > 0\n    }\n\n    /**\n     * 基于最小编辑距离算法原理的 list-diff\n     * @description\n     * 令 a' = a.slice(0)，b' = b.slice(0)\n     * 求 a' -> b' 的编辑距离\n     * @param a\n     * @param i start index of a\n     * @param b\n     * @param j start index of b\n     */\n    function _ (a: string[], i: number, b: string[], j: number) {\n        if (i === a.length) {\n            const _added: string[] = added.map((d: E<string>) => d.value)\n\n            const tail = b.slice(j)\n            const toAdd = tail.filter(id => _added.indexOf(id) > -1)\n\n            patches.push(\n                ...toAdd.reduce((patches: Patch[], id: string) => {\n                    const index = tail.indexOf(id)\n\n                    const after = index === 0\n                        ? (j > 0 ? b[j - 1] : '')\n                        : tail[index - 1]\n\n                    return patches.concat([{\n                        type: PatchType.ADD,\n                        id,\n                        after\n                    }])\n                }, [])\n            )\n\n            return\n        }\n\n        if (j === b.length) {\n            const _deleted = deleted.map(d => d.value)\n\n            patches.push(\n                ...a\n                    .slice(i)\n                    .filter(id => _deleted.indexOf(id) > -1)\n                    .map(id => ({\n                        type: PatchType.DELETE,\n                        id\n                    }))\n            )\n\n            return\n        }\n\n        // 检查 a' 和 b' 的首个元素是否相同\n        const aHead = a[i]\n        const bHead = b[j]\n\n        if (aHead !== bHead) {\n            // 检查是否删除了 aHead\n            const aHeadPos = b.indexOf(aHead)\n            if (aHeadPos === -1) {\n                // 删除了 aHead\n                patches.push({\n                    type: PatchType.DELETE,\n                    id: aHead\n                })\n            }\n\n            // 检查是否增加了 bHead\n            const bHeadPos = a.indexOf(bHead)\n            if (bHeadPos === -1) {\n                // 增加了 bHead\n                patches.push({\n                    type: PatchType.ADD,\n                    id: bHead,\n                    after: j > 0 ? b[j - 1] : ''\n                })\n            }\n\n            const repoPatches: Patch[] = []\n\n            if (aHeadPos > -1) {\n                if (!hasRepositioned(aHead)) {\n                    const r: Reposition = {\n                        id: aHead,\n                        from: i,\n                        to: aHeadPos\n                    }\n\n                    // 如果 aHead 没有被删除，也没有移动过，则计算其移动的距离\n                    const moves = getMoves(i, aHeadPos)\n\n                    if (moves !== 0) {\n                        repoPatches.push({\n                            type: PatchType.REPOSITION,\n                            id: aHead,\n                            moves\n                        })\n\n                        repoHistory.push(r)\n                    }\n                }\n            }\n\n            if (bHeadPos > -1) {\n                if (!hasRepositioned(bHead)) {\n                    const r: Reposition = {\n                        id: bHead,\n                        from: bHeadPos,\n                        to: j\n                    }\n\n                    // 如果 bHead 没有被删除，也没有移动过，则计算其移动的距离\n                    const moves = getMoves(bHeadPos, j)\n\n                    if (moves !== 0) {\n                        repoPatches.push({\n                            type: PatchType.REPOSITION,\n                            id: bHead,\n                            moves\n                        })\n\n                        repoHistory.push(r)\n                    }\n                }\n            }\n\n            patches.push(...repoPatches)\n        }\n\n        _(a, i + 1, b, j + 1)\n    }\n\n    _(a, 0, b, 0)\n\n    return patches\n}\n",
    "import { Patch, PatchType, Tinker } from './types'\n\nexport const applyPatches = (input: string[], patches: Patch[], tinker: Tinker) => {\n    let output: string[] = input\n\n    for (let i = 0; i < patches.length; i++) {\n        const patch = patches[i]\n\n        switch (patch.type) {\n        case PatchType.ADD:\n            output = tinker.applyAdditon(output, patch)\n            break\n        case PatchType.DELETE:\n            output = tinker.applyDeletion(output, patch)\n            break\n        case PatchType.REPOSITION:\n            output = tinker.applyRepostion(output, patch)\n        }\n    }\n\n    return output\n}\n",
    "import { Tinker, Patch, PatchType } from './types'\n\nexport class SimpleTinker implements Tinker {\n    applyAdditon (input: string[], patch: Patch): string[] {\n        if (patch.type !== PatchType.ADD) return input\n\n        const { id, after } = patch\n        if (typeof after !== 'string') {\n            let afterIndex = -1\n            for (let i = after.length - 1; i > 0; i--) {\n                afterIndex = input.indexOf(after[i])\n                if (afterIndex > -1) break\n            }\n\n            return [...input.slice(0, afterIndex + 1), id, ...input.slice(afterIndex + 1)]\n        }\n\n        if (after === '') {\n            return [id, ...input]\n        }\n\n        const afterIndex = input.indexOf(after)\n        return [...input.slice(0, afterIndex + 1), id, ...input.slice(afterIndex + 1)]\n    }\n\n    applyDeletion (input: string[], patch: Patch): string[] {\n        if (patch.type !== PatchType.DELETE) return input\n\n        const { id } = patch\n        const deleteIndex = input.indexOf(id)\n        return [...input.slice(0, deleteIndex), ...input.slice(deleteIndex + 1)]\n    }\n\n    applyRepostion (input: string[], patch: Patch): string[] {\n        if (patch.type !== PatchType.REPOSITION) return input\n\n        const { id, moves } = patch\n        const fromIndex = input.indexOf(id)\n        const toIndex = fromIndex + moves\n        input.splice(fromIndex, 1)\n        return [...input.slice(0, toIndex), id, ...input.slice(toIndex)]\n    }\n}\n",
    "\nreturn _$index_3;\n\n});\n",
    "export { Patch, PatchType, Tinker } from './types'\nexport { listDiff } from './listDiff'\nexport { applyPatches } from './applyPatches'\nexport { SimpleTinker } from './SimpleTinker'\n"
  ],
  "sourceRoot": ""
}