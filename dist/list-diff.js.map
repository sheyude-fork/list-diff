{
  "version": 3,
  "sources": [
    "node_modules/browser-pack-flat/_prelude",
    "src/types.ts",
    "src/utils.ts",
    "src/listDiff.ts",
    "src/applyPatches.ts",
    "node_modules/browser-pack-flat/_postlude",
    "src/index.ts"
  ],
  "names": [
    "f",
    "exports",
    "module",
    "define",
    "amd",
    "window",
    "global",
    "self",
    "this",
    "ListDiff",
    "PatchType",
    "_$types_4",
    "ADD",
    "DELETE",
    "REPOSITION",
    "_$utils_5",
    "difference",
    "a",
    "b",
    "reduce",
    "r",
    "value",
    "index",
    "concat",
    "indexOf",
    "intersection",
    "bIndex",
    "_$listDiff_3",
    "listDiff",
    "patches",
    "deleted",
    "added",
    "inter",
    "reverse",
    "_a",
    "type",
    "id",
    "calAfterForRepostion",
    "after",
    "_$applyPatches_1",
    "applyPatches",
    "input",
    "tinker",
    "SimpleTinker",
    "output",
    "i",
    "length",
    "patch",
    "applyAdditon",
    "applyDeletion",
    "applyRepostion",
    "prototype",
    "filter",
    "__spreadArrays",
    "push",
    "slice",
    "_$index_2"
  ],
  "mappings": "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",
  "sourcesContent": [
    "(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.ListDiff = f()}})(function(){var define,module,exports;\n",
    "export enum PatchType {\n    ADD = 'ADD',\n    DELETE = 'DELETE',\n    REPOSITION = 'REPOSITION'\n}\n\nexport type Patch = {\n    type: PatchType,\n    id: string,\n    after?: string\n}\n\nexport interface Tinker {\n    applyDeletion (input: string[], deletionPatch: Patch): string[];\n    applyRepostion (input: string[], repositionpPatch: Patch): string[];\n    applyAdditon (input: string[], addtionPatch: Patch): string[];\n}\n",
    "export type E<T> = {\n    value: T,\n    index: number\n}\n\nexport const difference = <T> (a: T[], b: T[]): E<T>[] =>\n    a.reduce(\n        (r: E<T>[], value: T, index: number) =>\n            r.concat(\n                b.indexOf(value) === -1\n                    ? [{\n                        value,\n                        index\n                    }] : []\n            ),\n        []\n    )\n\nexport const intersection = <T> (a: T[], b: T[]): E<T>[] =>\n    a.reduce(\n        (r: E<T>[], value: T, index: number) => {\n            const bIndex = b.indexOf(value)\n\n            return r.concat(\n                bIndex > -1 && bIndex != index\n                    ? [{\n                        value,\n                        index: bIndex\n                    }] : []\n            )\n        },\n        []\n    )\n",
    "import { Patch, PatchType } from './types'\nimport { E, difference, intersection } from './utils'\n\nexport const listDiff = (a: string[], b: string[]): Patch[] => {\n    let patches: Patch[] = []\n    const deleted: E<string>[] = difference(a, b)\n    const added: E<string>[] = difference(b, a)\n    const inter: E<string>[] = intersection(a, b).reverse()\n\n    // 被删除的元素\n    patches = deleted.reduce((patches, { value }) => patches.concat([{\n        type: PatchType.DELETE,\n        id: value\n    }]), patches)\n\n    // 移动的元素\n    const calAfterForRepostion = (index: number) => {\n        while (index > 0 && a.indexOf(b[index - 1]) === -1) {\n            index--\n        }\n\n        return index > 0 ? b[index - 1] : ''\n    }\n\n    patches = inter.reduce((patches, { value, index }) => patches.concat([{\n        type: PatchType.REPOSITION,\n        id: value,\n        after: calAfterForRepostion(index)\n    }]), patches)\n\n    // 新增的元素\n    patches = added.reduce((patches, { value, index }) => patches.concat([{\n        type: PatchType.ADD,\n        id: value,\n        after: index > 0 ? b[index - 1] : ''\n    }]), patches)\n\n    return patches\n}\n",
    "import { Patch, PatchType, Tinker } from './types'\n\nexport const applyPatches = (input: string[], patches: Patch[], tinker: Tinker = new SimpleTinker()) => {\n    let output: string[] = input\n\n    for (let i = 0; i < patches.length; i++) {\n        const patch = patches[i]\n\n        switch (patch.type) {\n        case PatchType.ADD:\n            output = tinker.applyAdditon(output, patch)\n            break\n        case PatchType.DELETE:\n            output = tinker.applyDeletion(output, patch)\n            break\n        case PatchType.REPOSITION:\n            output = tinker.applyRepostion(output, patch)\n        }\n    }\n\n    return output\n}\n\nexport class SimpleTinker implements Tinker {\n    applyDeletion (input: string[], patch: Patch): string[] {\n        if (patch.type !== PatchType.DELETE) return input\n\n        const { id } = patch\n        return input.filter(i => i !== id)\n    }\n\n    applyRepostion (input: string[], patch: Patch): string[] {\n        if (patch.type !== PatchType.REPOSITION) return input\n\n        const { id, after } = patch\n\n        if (after === '') {\n            if (input[0] === id) return input\n            input = input.filter(i => i !== id)\n            return [id, ...input]\n        } else {\n            const index = input.indexOf(id)\n            if (input[index - 1] === after) return input // 该元素前面的元素已经是 after 了\n\n            return input.reduce((output, i) => {\n                if (i !== id) {\n                    output.push(i)\n                    if (i === after) output.push(id)\n                }\n\n                return output\n            }, [])\n        }\n    }\n\n    applyAdditon (input: string[], patch: Patch): string[] {\n        if (patch.type !== PatchType.ADD) return input\n\n        const { id, after } = patch\n        if (after === '') return [id, ...input]\n        const index = input.indexOf(after)\n        return [...input.slice(0, index + 1), id, ...input.slice(index + 1)]\n    }\n}\n",
    "\nreturn _$index_2;\n\n});\n",
    "export { Patch, PatchType, Tinker } from './types'\nexport { listDiff } from './listDiff'\nexport { applyPatches, SimpleTinker } from './applyPatches'\n"
  ],
  "sourceRoot": ""
}